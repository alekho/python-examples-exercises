# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

ip_net = input('Введите сеть:')
ip, prefix_mask = ip_net.split('/')
oct1, oct2, oct3, oct4 = ip.split('.')
prefix_mask = int(prefix_mask)
zero = 32 - prefix_mask
mask = str(prefix_mask * '1' + zero * '0')
moct1, moct2, moct3, moct4 = mask[:8], mask[8:16], mask[16:24], mask[24:]
ip_bin = bin(int(oct1) + 256)[3:] + bin(int(oct2) + 256)[3:] + bin(int(oct3) + 256)[3:] + bin(int(oct4) + 256)[3:] # Переводим IP в бинарное представление
net_address = str(ip_bin[:prefix_mask]) + (zero * '0')
noct1, noct2, noct3, noct4 = net_address[:8], net_address[8:16], net_address[16:24], net_address[24:]



print(f'''
Network:
{int(noct1, 2):<10}{int(noct2, 2):<10}{int(noct3, 2):<10}{int(noct4, 2):<10}
{noct1:<8}  {noct2:<8}  {noct3:<8}  {noct4:<8}''')

print(f'''
Mask:
{'/' + str(prefix_mask)}
{int(moct1, 2):<10}{int(moct2, 2):<10}{int(moct3, 2):<10}{int(moct4, 2):<10}
{moct1:<8}  {moct2:<8}  {moct3:<8}  {moct4:<8}''')